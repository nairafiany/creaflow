generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                    String    @id @default(cuid())
  createdAt             DateTime
  updatedAt             DateTime
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Session {
  id        String   @id @default(cuid()) 
  createdAt DateTime
  updatedAt DateTime
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Verification {
  id         String    @id @default(cuid()) 
  createdAt  DateTime?
  updatedAt  DateTime?
  identifier String
  value      String
  expiresAt  DateTime

  @@map("verifications")
}

model User {
  id               String         @id @default(cuid())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  name             String?
  email            String         @unique
  image            String?
  role             UserRole       @default(CLIENT)
  phone            String?
  company          String?
  bio              String?
  isActive         Boolean        @default(true)
  website          String?
  linkedin         String?
  portfolio        String?
  timezone         String?        @default("Asia/Jakarta")
  hourlyRate       Decimal?       @db.Decimal(10, 2)
  specialties      String[]
  yearsExperience  Int?
  emailVerified    Boolean?       @default(false)
  accounts         Account[]
  activityLogs     ActivityLog[]
  files            File[]
  clientInvoices   Invoice[]      @relation("ClientInvoices")
  editorInvoices   Invoice[]      @relation("EditorInvoices")
  receivedMessages Message[]      @relation("ReceivedMessages")
  sentMessages     Message[]      @relation("SentMessages")
  notifications    Notification[]
  payments         Payment[]
  clientProjects   Project[]      @relation("ClientProjects")
  editorProjects   Project[]      @relation("EditorProjects")
  revisions        Revision[]
  sessions         Session[]

  @@map("users")
}

model Project {
  id                 String          @id @default(cuid())
  title              String
  description        String?
  brief              String?
  status             ProjectStatus   @default(DRAFT)
  priority           ProjectPriority @default(MEDIUM)
  deadline           DateTime?
  estimatedHours     Int?
  actualHours        Int?
  budget             Decimal?        @db.Decimal(10, 2)
  agreedPrice        Decimal?        @db.Decimal(10, 2)
  currency           String          @default("IDR")
  videoType          String?
  duration           String?
  resolution         String?
  framerate          String?
  clientId           String
  editorId           String?
  progressPercentage Int             @default(0)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  startedAt          DateTime?
  completedAt        DateTime?
  assignedAt         DateTime?
  activityLogs       ActivityLog[]
  files              File[]
  invoices           Invoice[]
  messages           Message[]
  client             User            @relation("ClientProjects", fields: [clientId], references: [id], onDelete: Cascade)
  editor             User?           @relation("EditorProjects", fields: [editorId], references: [id])
  revisions          Revision[]

  @@map("projects")
}

model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique
  title         String
  description   String?
  status        InvoiceStatus @default(DRAFT)
  items         Json?
  notes         String?
  terms         String?
  subtotal      Decimal       @db.Decimal(10, 2)
  taxRate       Decimal?      @db.Decimal(5, 2)
  taxAmount     Decimal?      @db.Decimal(10, 2)
  discount      Decimal?      @db.Decimal(10, 2)
  total         Decimal       @db.Decimal(10, 2)
  currency      String        @default("IDR")
  issueDate     DateTime      @default(now())
  dueDate       DateTime
  paidDate      DateTime?
  projectId     String?
  clientId      String
  editorId      String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  files         File[]
  client        User          @relation("ClientInvoices", fields: [clientId], references: [id], onDelete: Cascade)
  editor        User          @relation("EditorInvoices", fields: [editorId], references: [id], onDelete: Cascade)
  project       Project?      @relation(fields: [projectId], references: [id])
  payments      Payment[]

  @@map("invoices")
}

model Payment {
  id            String        @id @default(cuid())
  paymentNumber String        @unique
  amount        Decimal       @db.Decimal(10, 2)
  currency      String        @default("IDR")
  status        PaymentStatus @default(PENDING)
  method        PaymentMethod @default(BANK_TRANSFER)
  reference     String?
  notes         String?
  receiptUrl    String?
  paymentDate   DateTime?
  confirmedDate DateTime?
  invoiceId     String
  userId        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  files         File[]
  invoice       Invoice       @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Revision {
  id              String         @id @default(cuid())
  title           String
  description     String?
  status          RevisionStatus @default(PENDING)
  feedback        String?
  revisionNumber  Int            @default(1)
  isMinorRevision Boolean        @default(false)
  timeRequested   DateTime?
  timeStarted     DateTime?
  timeCompleted   DateTime?
  projectId       String
  userId          String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  reviewedAt      DateTime?
  files           File[]
  project         Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("revisions")
}

model File {
  id           String    @id @default(cuid())
  filename     String
  originalName String
  path         String
  url          String?
  size         Int?
  mimeType     String?
  type         FileType  @default(OTHER)
  duration     Int?
  dimensions   String?
  isPublic     Boolean   @default(false)
  tags         String[]
  userId       String?
  projectId    String?
  revisionId   String?
  invoiceId    String?
  paymentId    String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  invoice      Invoice?  @relation(fields: [invoiceId], references: [id])
  payment      Payment?  @relation(fields: [paymentId], references: [id])
  project      Project?  @relation(fields: [projectId], references: [id])
  revision     Revision? @relation(fields: [revisionId], references: [id])
  user         User?     @relation(fields: [userId], references: [id])

  @@map("files")
}

model Message {
  id         String    @id @default(cuid())
  content    String
  isRead     Boolean   @default(false)
  projectId  String?
  senderId   String
  receiverId String
  parentId   String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  parent     Message?  @relation("MessageThread", fields: [parentId], references: [id])
  replies    Message[] @relation("MessageThread")
  project    Project?  @relation(fields: [projectId], references: [id])
  receiver   User      @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User      @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Notification {
  id        String             @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  status    NotificationStatus @default(UNREAD)
  data      Json?
  userId    String
  createdAt DateTime           @default(now())
  readAt    DateTime?
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model ActivityLog {
  id          String   @id @default(cuid())
  action      String
  description String
  metadata    Json?
  ipAddress   String?
  userAgent   String?
  userId      String?
  projectId   String?
  createdAt   DateTime @default(now())
  project     Project? @relation(fields: [projectId], references: [id])
  user        User?    @relation(fields: [userId], references: [id])

  @@map("activity_logs")
}

model ProjectTemplate {
  id             String   @id @default(cuid())
  name           String
  description    String?
  category       String
  defaultBrief   String?
  estimatedHours Int?
  suggestedPrice Decimal? @db.Decimal(10, 2)
  requiredFiles  String[]
  deliverables   String[]
  isActive       Boolean  @default(true)
  isPublic       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("project_templates")
}

model SystemSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      String   @default("string")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}

enum UserRole {
  CLIENT
  EDITOR
  ADMIN
}

enum ProjectStatus {
  DRAFT
  IN_PROGRESS
  REVISION
  DONE
  CANCELLED
}

enum RevisionStatus {
  PENDING
  IN_REVIEW
  APPROVED
  REJECTED
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  BANK_TRANSFER
  CREDIT_CARD
  PAYPAL
  GOPAY
  OVO
  DANA
  OTHER
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum FileType {
  VIDEO
  AUDIO
  IMAGE
  DOCUMENT
  INVOICE
  RECEIPT
  OTHER
}

enum ProjectPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NotificationType {
  PROJECT_ASSIGNED
  REVISION_REQUESTED
  REVISION_SUBMITTED
  PROJECT_COMPLETED
  PAYMENT_RECEIVED
  INVOICE_SENT
  DEADLINE_REMINDER
  GENERAL
}

enum NotificationStatus {
  UNREAD
  READ
  ARCHIVED
}
